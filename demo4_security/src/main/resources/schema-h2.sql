
-- CREATE TABLE app_role (
    -- id bigint NOT NULL,
    -- description varchar(255) DEFAULT NULL,
    -- role_name varchar(255) DEFAULT NULL,
    -- PRIMARY KEY (id)
-- );

DROP TABLE IF EXISTS _users;
CREATE TABLE _users (
    username VARCHAR(50) NOT NULL PRIMARY KEY,
    password VARCHAR(256) NOT NULL,
    enabled BOOLEAN NOT NULL
);

DROP TABLE IF EXISTS authorities;
CREATE TABLE authorities (
    username VARCHAR(50) NOT NULL,
    authority VARCHAR(50) NOT NULL,
    --CONSTRAINT fk_authorities_users FOREIGN KEY(username) REFERENCES _users(username)
);

--CREATE UNIQUE INDEX ix_auth_username ON authorities (username, authority);

DROP TABLE IF EXISTS groups;
CREATE TABLE groups (
    id BIGINT generated BY DEFAULT AS IDENTITY(START WITH 0) PRIMARY KEY,
    group_name VARCHAR_ignorecase(50) NOT NULL
);

DROP TABLE IF EXISTS group_authorities;
CREATE TABLE group_authorities (
    group_id BIGINT NOT NULL,
    authority VARCHAR(50) NOT NULL,
    CONSTRAINT fk_group_authorities_group FOREIGN KEY(group_id) REFERENCES groups(id)
);

DROP TABLE IF EXISTS group_members;
CREATE TABLE group_members (
    id BIGINT generated BY DEFAULT AS IDENTITY(START WITH 0) PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    group_id BIGINT NOT NULL,
    CONSTRAINT fk_group_members_group FOREIGN KEY(group_id) REFERENCES groups(id)
);

DROP TABLE IF EXISTS oauth_client_details;
CREATE TABLE oauth_client_details (
    client_id VARCHAR(256) PRIMARY KEY,
    resource_ids VARCHAR(256),
    client_secret VARCHAR(256),
    scope VARCHAR(256),
    authorized_grant_types VARCHAR(256),
    web_server_redirect_uri VARCHAR(256),
    authorities VARCHAR(256),
    access_token_validity INTEGER,
    refresh_token_validity INTEGER,
    additional_information VARCHAR(4096),
    autoapprove VARCHAR(256)
);

DROP TABLE IF EXISTS oauth_client_token;
CREATE TABLE oauth_client_token (
    token_id VARCHAR(255),
    token BLOB,
    authentication_id VARCHAR(255),
    user_name VARCHAR(255),
    client_id VARCHAR(255)
);

DROP TABLE IF EXISTS oauth_access_token;
CREATE TABLE oauth_access_token (
    token_id VARCHAR(255),
    token BLOB,
    authentication_id VARCHAR(255),
    user_name VARCHAR(255),
    client_id VARCHAR(255),
    authentication BLOB,
    refresh_token VARCHAR(255)
);

DROP TABLE IF EXISTS oauth_refresh_token;
CREATE TABLE oauth_refresh_token (
    token_id VARCHAR(255),
    token BLOB,
    authentication BLOB
);

DROP TABLE IF EXISTS oauth_code;
CREATE TABLE oauth_code (
    code VARCHAR(255),
    authentication BLOB
);